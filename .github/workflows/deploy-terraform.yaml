name: Deploy Terraform

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'terraform/lambda/**'
      - 'terraform/*.tf'
      - 'terraform/**'
      - '.github/workflows/deploy-terraform.yaml'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        function:
          - name: scraper
            runtime: node
          - name: gcs
            runtime: python

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        if: matrix.function.runtime == 'node'
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup Python
        if: matrix.function.runtime == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Dependencies
        working-directory: terraform/lambda/${{ matrix.function.name }}
        run: |
          if [[ "${{ matrix.function.runtime }}" == "node" ]]; then
            npm install
          elif [[ "${{ matrix.function.runtime }}" == "python" ]]; then
            pip install -r requirements.txt -t dist/
          fi

      - name: Build Lambda
        working-directory: terraform/lambda/${{ matrix.function.name }}
        run: |
          chmod +x build.sh
          ./build.sh

      - name: Upload Lambda zip
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.function.name }}-zip
          path: terraform/lambda/${{ matrix.function.name }}/dist/index.zip

  prepare:
    name: Prepare Lambda Artifacts
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download scraper artifact
        uses: actions/download-artifact@v4
        with:
          name: scraper-zip
          path: terraform/lambda/scraper/dist

      - name: Download gcs artifact
        uses: actions/download-artifact@v4
        with:
          name: gcs-zip
          path: terraform/lambda/gcs/dist

  terraform-infra:
    name: Terraform Apply
    needs: prepare
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform

    env:
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Setup Terraform Credentials
        run: |
          mkdir -p ~/.terraform.d
          echo "{\"credentials\": {\"app.terraform.io\": {\"token\": \"${TF_API_TOKEN}\"}}}" > ~/.terraform.d/credentials.tfrc.json

      - name: Download scraper artifact
        uses: actions/download-artifact@v4
        with:
          name: scraper-zip
          path: terraform/lambda/scraper/dist

      - name: Download gcs artifact
        uses: actions/download-artifact@v4
        with:
          name: gcs-zip
          path: terraform/lambda/gcs/dist

      - name: Cache Terraform providers and modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
          key: terraform-${{ runner.os }}-${{ hashFiles('**/*.tf') }}
          restore-keys: terraform-${{ runner.os }}-

      - name: Prepare Terraform Plugin Cache Directory
        run: mkdir -p ~/.terraform.d/plugin-cache

      - name: Terraform Init
        run: terraform init -plugin-dir=~/.terraform.d/plugin-cache

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve