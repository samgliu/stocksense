services:
  backend:
    build: ./backend
    ports:
      - '8000:8000'
    volumes:
      - ./backend:/app
      - ./backend/credentials:/credentials
      - ./backend/.env:/app/.env
    env_file:
      - ./backend/.env
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: /credentials/serviceAccountKey.json
    depends_on:
      - db
      - kafka

  # frontend:
  #   build: ./frontend
  #   ports:
  #     - '3000:3000'
  #   volumes:
  #     - ./frontend:/app
  #   stdin_open: true
  #   tty: true
  #   depends_on:
  #     - backend

  db:
    image: postgres:15
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: stocksense
    volumes:
      - pgdata:/var/lib/postgresql/data

  ## kafka
  kafka:
    image: bitnami/kafka:3.5.1
    container_name: kafka
    ports:
      - "9092:9092"
    env_file:
      - ./kafka/.env
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_KRAFT_CLUSTER_ID=${KAFKA_CLUSTER_ID}
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - ./kafka:/opt/kafka
      - kafka_data:/bitnami/kafka

  langgraph-consumer:
    build:
      context: ./worker-langgraph
    working_dir: /app
    volumes:
      - ./worker-langgraph:/app
    env_file:
      - ./worker-langgraph/.env
    depends_on:
      - kafka
      - db
    restart: on-failure

  # airflow
  airflow-db:
    image: postgres:15
    ports:
      - '5433:5433'
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow_pgdata:/var/lib/postgresql/data
    env_file:
      - ./airflow/.env

  airflow-init:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    image: apache/airflow:latest-python3.11
    depends_on:
      - airflow-db
    volumes:
      - ./airflow:/opt/airflow
    env_file:
      - ./airflow/.env
    environment:
      PYTHONPATH: /opt/airflow
    entrypoint: >
      bash -c "
        airflow db migrate &&
        airflow users create --username admin --password admin --firstname Sam --lastname Liu --role Admin --email samgliu19@gmail.com
      "

  airflow-webserver:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    image: apache/airflow:latest-python3.11
    depends_on:
      - airflow-init
    ports:
      - '8080:8080'
    volumes:
      - ./airflow:/opt/airflow
    env_file:
      - ./airflow/.env
    environment:
      PYTHONPATH: /opt/airflow
    command: webserver

  airflow-scheduler:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    image: apache/airflow:latest-python3.11
    depends_on:
      - airflow-webserver
    volumes:
      - ./airflow:/opt/airflow
    env_file:
      - ./airflow/.env
    environment:
      PYTHONPATH: /opt/airflow
    command: scheduler

volumes:
  pgdata:
  airflow_pgdata:
  kafka_data:
