import asyncio
import os
from typing import Dict, List, Optional

from google import genai

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
MODEL = "gemini-2.0-flash"
client = genai.Client(api_key=GEMINI_API_KEY)


# --- Prompt Builder ---
def build_analysis_prompt(
    company: Dict,
    history: Optional[List[Dict]],
    news: Optional[List[Dict]],
    scraped_text: Optional[str] = None,
    sentiment_analysis: Optional[Dict] = None,
) -> str:
    insight_section = ""
    if company.get("insights"):
        insight_section = f"""
    Note: The following insight was previously generated by a smaller 8B language model. You may optionally consider it as context for your analysis:

    \"\"\"
    {company['insights']}
    \"\"\""""  # noqa: E501

    history_section = ""
    if history:
        history_str = "\n".join(
            f"- {entry['date']}: ${entry['close']}" for entry in history[-60:]
        )
        history_section = (
            f"\nðŸ“ˆ Historical Stock Price (recent 30 days):\n{history_str}"
        )

    news_section = ""
    if news:
        news_str = "\n".join(
            f"ðŸ“° {item.title} â€” {item.snippet or 'No summary available'} ({item.published_at.date()})"
            for item in news
        )
        news_section = f"\nðŸ“° Recent News Headlines:\n{news_str}"

    scraped_section = ""
    if scraped_text:
        scraped_section = f"""
    ðŸ“„ Webpage Extracted Text (Scraped from company domain):
    \"\"\"
    {scraped_text.strip()[:1000]}
    \"\"\""""

    sentiment_analysis_section = ""
    if sentiment_analysis and isinstance(sentiment_analysis, dict):
        sentiment_score = sentiment_analysis.get("score", 0.0)
        sentiment_label = sentiment_analysis.get("sentiment", "unknown")
        summary_text = sentiment_analysis.get("summary", "").strip()

        sentiment_analysis_section = f"""
        ðŸ§  Market Sentiment Summary (Generated via Google Custom Search + Claude AI):

        Sentiment Score: {sentiment_score}
        Sentiment: {sentiment_label}
        Summary:
        \"\"\"
        {summary_text}
        \"\"\"
        """

    prompt = f"""
    You are a financial analyst AI. Analyze the investment potential of the following company using its profile and recent stock performance data.

    Given the following company profile and its recent stock performance, please do the following:

    1. ðŸ“Š Write a detailed investment analysis including:
    - Overview of the company
    - Financial strengths or red flags
    - Market positioning and risk factors
    - Long-term investment potential
    - Stock price trend interpretation

    2. ðŸ“ˆ Predict the stock price range for the next 30 days:
    - Provide expected minimum, maximum, and average price
    - Provide confidence intervals (e.g., 70% and 90%) if possible

    Return your response as valid JSON with this exact format:

    ```json
    {{
        "insights": "Your natural language analysis goes here.",
        "prediction": {{
            "min": 0,
            "max": 0,
            "average": 0,
            "confidence": {{
                "70%": {{"min": 0, "max": 0}},
                "90%": {{"min": 0, "max": 0}}
            }},
        }}
    }}
    ```

    ðŸ“Œ Company Overview:
    - Name: {company['name']}
    - Ticker: {company['ticker']}
    - Sector: {company.get('sector', 'N/A')}
    - Industry: {company.get('industry', 'N/A')}
    - CEO: {company.get('ceo', 'N/A')}
    - IPO Date: {company.get('ipo_date', 'N/A')}
    - Employees: {company.get('fulltime_employees', 'N/A')}
    - Website: {company.get('website', 'N/A')}
    - Country: {company.get('country', 'N/A')}
    - Exchange: {company.get('exchange', 'N/A')}

    ðŸ“Ÿ Financials:
    - Current Price: ${company.get('current_price', 'N/A')}
    - Market Cap: ${company.get('market_cap', 'N/A')}
    - 52W Range: {company.get('range_52w', 'N/A')}
    - Beta: {company.get('beta', 'N/A')}
    - Avg Volume: {company.get('vol_avg', 'N/A')}
    - Last Dividend: {company.get('last_dividend', 'N/A')}
    - Discounted Cash Flow (DCF): {company.get('dcf', 'N/A')} (Diff: {company.get('dcf_diff', 'N/A')})

    ðŸ“„ Description:
    {company.get('summary', 'No summary provided.')}
            
    {history_section}
    
    {news_section}
    
    {scraped_section}
    
    {insight_section}
    
    {sentiment_analysis_section}
    """  # noqa: E501
    return prompt.strip()


# --- Analysis Entry Point ---
async def analyze_company_payload(
    company: Dict,
    history: Optional[List[Dict]],
    news: Optional[List[Dict]],
    scraped_text: Optional[str] = None,
    sentiment_analysis: Optional[Dict] = None,
) -> str:
    prompt = build_analysis_prompt(
        company, history, news, scraped_text, sentiment_analysis
    )

    response = await asyncio.to_thread(
        client.models.generate_content,
        model=MODEL,
        contents=prompt,
        config={
            "response_mime_type": "application/json",
        },
    )

    return response.text  # valid JSON string
